// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

// <auto-generated>
//
// Generated from file `gtrc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef _____ice_gtrc_h__
#define _____ice_gtrc_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace gtr
{

class IService;

class IQuestionServer;

class IAnswerEndpoint;

class IQuestionAsker;

class ILogger;

class ILogServer;

class IGameHost;

class IGtrServer;

}

}

namespace gtr
{

class IService;
bool operator==(const IService&, const IService&);
bool operator<(const IService&, const IService&);

class IQuestionServer;
bool operator==(const IQuestionServer&, const IQuestionServer&);
bool operator<(const IQuestionServer&, const IQuestionServer&);

class IAnswerEndpoint;
bool operator==(const IAnswerEndpoint&, const IAnswerEndpoint&);
bool operator<(const IAnswerEndpoint&, const IAnswerEndpoint&);

class IQuestionAsker;
bool operator==(const IQuestionAsker&, const IQuestionAsker&);
bool operator<(const IQuestionAsker&, const IQuestionAsker&);

class ILogger;
bool operator==(const ILogger&, const ILogger&);
bool operator<(const ILogger&, const ILogger&);

class ILogServer;
bool operator==(const ILogServer&, const ILogServer&);
bool operator<(const ILogServer&, const ILogServer&);

class IGameHost;
bool operator==(const IGameHost&, const IGameHost&);
bool operator<(const IGameHost&, const IGameHost&);

class IGtrServer;
bool operator==(const IGtrServer&, const IGtrServer&);
bool operator<(const IGtrServer&, const IGtrServer&);

}

namespace IceInternal
{

::Ice::Object* upCast(::gtr::IService*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::IService*);

::Ice::Object* upCast(::gtr::IQuestionServer*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::IQuestionServer*);

::Ice::Object* upCast(::gtr::IAnswerEndpoint*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::IAnswerEndpoint*);

::Ice::Object* upCast(::gtr::IQuestionAsker*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::IQuestionAsker*);

::Ice::Object* upCast(::gtr::ILogger*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::ILogger*);

::Ice::Object* upCast(::gtr::ILogServer*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::ILogServer*);

::Ice::Object* upCast(::gtr::IGameHost*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::IGameHost*);

::Ice::Object* upCast(::gtr::IGtrServer*);
::IceProxy::Ice::Object* upCast(::IceProxy::gtr::IGtrServer*);

}

namespace gtr
{

typedef ::IceInternal::Handle< ::gtr::IService> IServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::IService> IServicePrx;

void __read(::IceInternal::BasicStream*, IServicePrx&);
void __patch__IServicePtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::IQuestionServer> IQuestionServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::IQuestionServer> IQuestionServerPrx;

void __read(::IceInternal::BasicStream*, IQuestionServerPrx&);
void __patch__IQuestionServerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::IAnswerEndpoint> IAnswerEndpointPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::IAnswerEndpoint> IAnswerEndpointPrx;

void __read(::IceInternal::BasicStream*, IAnswerEndpointPrx&);
void __patch__IAnswerEndpointPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::IQuestionAsker> IQuestionAskerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::IQuestionAsker> IQuestionAskerPrx;

void __read(::IceInternal::BasicStream*, IQuestionAskerPrx&);
void __patch__IQuestionAskerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::ILogger> ILoggerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::ILogger> ILoggerPrx;

void __read(::IceInternal::BasicStream*, ILoggerPrx&);
void __patch__ILoggerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::ILogServer> ILogServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::ILogServer> ILogServerPrx;

void __read(::IceInternal::BasicStream*, ILogServerPrx&);
void __patch__ILogServerPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::IGameHost> IGameHostPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::IGameHost> IGameHostPrx;

void __read(::IceInternal::BasicStream*, IGameHostPrx&);
void __patch__IGameHostPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::gtr::IGtrServer> IGtrServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::gtr::IGtrServer> IGtrServerPrx;

void __read(::IceInternal::BasicStream*, IGtrServerPrx&);
void __patch__IGtrServerPtr(void*, ::Ice::ObjectPtr&);

}

namespace gtr
{

typedef ::std::map< ::std::string, ::std::string> HashValueSet;
void __writeHashValueSet(::IceInternal::BasicStream*, const HashValueSet&);
void __readHashValueSet(::IceInternal::BasicStream*, HashValueSet&);

typedef ::std::map< ::std::string, ::std::string> ReturnValueT;
void __writeReturnValueT(::IceInternal::BasicStream*, const ReturnValueT&);
void __readReturnValueT(::IceInternal::BasicStream*, ReturnValueT&);

typedef ::std::vector< ::Ice::Byte> ByteStreamT;

typedef ::std::vector< ::std::string> StringListT;

typedef ::std::vector< ::gtr::HashValueSet> HashValueListT;
void __writeHashValueListT(::IceInternal::BasicStream*, const ::gtr::HashValueSet*, const ::gtr::HashValueSet*);
void __readHashValueListT(::IceInternal::BasicStream*, HashValueListT&);

typedef ::std::vector< ::Ice::Int> IntListT;

typedef ::std::vector< ::gtr::StringListT> StringListListT;
void __writeStringListListT(::IceInternal::BasicStream*, const ::gtr::StringListT*, const ::gtr::StringListT*);
void __readStringListListT(::IceInternal::BasicStream*, StringListListT&);

struct CallReturnT
{
    bool succ;
    ::std::string msg;
    ::gtr::HashValueSet props;

    bool operator==(const CallReturnT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(succ != __rhs.succ)
        {
            return false;
        }
        if(msg != __rhs.msg)
        {
            return false;
        }
        if(props != __rhs.props)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CallReturnT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(succ < __rhs.succ)
        {
            return true;
        }
        else if(__rhs.succ < succ)
        {
            return false;
        }
        if(msg < __rhs.msg)
        {
            return true;
        }
        else if(__rhs.msg < msg)
        {
            return false;
        }
        if(props < __rhs.props)
        {
            return true;
        }
        else if(__rhs.props < props)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CallReturnT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CallReturnT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CallReturnT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CallReturnT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

const ::Ice::Int IMAGEJPEG = 1;

const ::Ice::Int IMAGEPNG = 2;

const ::Ice::Int IMAGEBMP = 3;

struct ImageDataT
{
    ::Ice::Int type;
    ::gtr::ByteStreamT bytes;
    ::Ice::Int width;
    ::Ice::Int height;

    bool operator==(const ImageDataT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(bytes != __rhs.bytes)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ImageDataT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(bytes < __rhs.bytes)
        {
            return true;
        }
        else if(__rhs.bytes < bytes)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ImageDataT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ImageDataT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ImageDataT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ImageDataT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameAuthDataT
{
    ::Ice::Int type;
    ::gtr::ImageDataT image;
    ::std::string seckey;

    bool operator==(const GameAuthDataT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(image != __rhs.image)
        {
            return false;
        }
        if(seckey != __rhs.seckey)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameAuthDataT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(image < __rhs.image)
        {
            return true;
        }
        else if(__rhs.image < image)
        {
            return false;
        }
        if(seckey < __rhs.seckey)
        {
            return true;
        }
        else if(__rhs.seckey < seckey)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameAuthDataT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameAuthDataT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameAuthDataT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameAuthDataT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameIdentifyT
{
    ::std::string id;
    ::std::string tradeNo;

    bool operator==(const GameIdentifyT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(tradeNo != __rhs.tradeNo)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameIdentifyT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(tradeNo < __rhs.tradeNo)
        {
            return true;
        }
        else if(__rhs.tradeNo < tradeNo)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameIdentifyT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameIdentifyT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameIdentifyT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameIdentifyT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct ServiceIdentifyT
{
    ::std::string id;
    ::std::string version;

    bool operator==(const ServiceIdentifyT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(version != __rhs.version)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ServiceIdentifyT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(version < __rhs.version)
        {
            return true;
        }
        else if(__rhs.version < version)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ServiceIdentifyT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ServiceIdentifyT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ServiceIdentifyT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ServiceIdentifyT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct QuestionContentT
{
    ::Ice::Int type;
    ::gtr::ImageDataT image;
    ::gtr::ImageDataT image2;
    ::std::string text;
    ::Ice::Int cookie;
    ::std::string gameId;

    bool operator==(const QuestionContentT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(image != __rhs.image)
        {
            return false;
        }
        if(image2 != __rhs.image2)
        {
            return false;
        }
        if(text != __rhs.text)
        {
            return false;
        }
        if(cookie != __rhs.cookie)
        {
            return false;
        }
        if(gameId != __rhs.gameId)
        {
            return false;
        }
        return true;
    }

    bool operator<(const QuestionContentT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(image < __rhs.image)
        {
            return true;
        }
        else if(__rhs.image < image)
        {
            return false;
        }
        if(image2 < __rhs.image2)
        {
            return true;
        }
        else if(__rhs.image2 < image2)
        {
            return false;
        }
        if(text < __rhs.text)
        {
            return true;
        }
        else if(__rhs.text < text)
        {
            return false;
        }
        if(cookie < __rhs.cookie)
        {
            return true;
        }
        else if(__rhs.cookie < cookie)
        {
            return false;
        }
        if(gameId < __rhs.gameId)
        {
            return true;
        }
        else if(__rhs.gameId < gameId)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const QuestionContentT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const QuestionContentT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const QuestionContentT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const QuestionContentT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct QuestionResultT
{
    ::std::string value;
    ::Ice::Int cookie;

    bool operator==(const QuestionResultT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(cookie != __rhs.cookie)
        {
            return false;
        }
        return true;
    }

    bool operator<(const QuestionResultT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(cookie < __rhs.cookie)
        {
            return true;
        }
        else if(__rhs.cookie < cookie)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const QuestionResultT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const QuestionResultT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const QuestionResultT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const QuestionResultT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct LogMessageT
{
    ::Ice::Int xclass;
    ::std::string msg;

    bool operator==(const LogMessageT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(xclass != __rhs.xclass)
        {
            return false;
        }
        if(msg != __rhs.msg)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LogMessageT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(xclass < __rhs.xclass)
        {
            return true;
        }
        else if(__rhs.xclass < xclass)
        {
            return false;
        }
        if(msg < __rhs.msg)
        {
            return true;
        }
        else if(__rhs.msg < msg)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LogMessageT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LogMessageT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LogMessageT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LogMessageT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

enum GameWorkSheetTypeT
{
    gwsPost,
    gwsAccountAudit,
    gwsVerify
};

void __write(::IceInternal::BasicStream*, GameWorkSheetTypeT);
void __read(::IceInternal::BasicStream*, GameWorkSheetTypeT&);

struct GameWorkSheetPostT
{
    ::std::string sellerActor;
    ::Ice::Int sellerLevel;
    ::Ice::Long money;
    ::Ice::Int transactionTime;
    ::std::string sellerSecondPwd;
    ::std::string buyerActor;
    ::Ice::Int buyerLevel;
    ::Ice::Long buyerMoney;
    ::Ice::Int sellerIndex;
    ::Ice::Int sellerGroup;
    ::std::string bankPwd;

    bool operator==(const GameWorkSheetPostT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(sellerActor != __rhs.sellerActor)
        {
            return false;
        }
        if(sellerLevel != __rhs.sellerLevel)
        {
            return false;
        }
        if(money != __rhs.money)
        {
            return false;
        }
        if(transactionTime != __rhs.transactionTime)
        {
            return false;
        }
        if(sellerSecondPwd != __rhs.sellerSecondPwd)
        {
            return false;
        }
        if(buyerActor != __rhs.buyerActor)
        {
            return false;
        }
        if(buyerLevel != __rhs.buyerLevel)
        {
            return false;
        }
        if(buyerMoney != __rhs.buyerMoney)
        {
            return false;
        }
        if(sellerIndex != __rhs.sellerIndex)
        {
            return false;
        }
        if(sellerGroup != __rhs.sellerGroup)
        {
            return false;
        }
        if(bankPwd != __rhs.bankPwd)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameWorkSheetPostT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(sellerActor < __rhs.sellerActor)
        {
            return true;
        }
        else if(__rhs.sellerActor < sellerActor)
        {
            return false;
        }
        if(sellerLevel < __rhs.sellerLevel)
        {
            return true;
        }
        else if(__rhs.sellerLevel < sellerLevel)
        {
            return false;
        }
        if(money < __rhs.money)
        {
            return true;
        }
        else if(__rhs.money < money)
        {
            return false;
        }
        if(transactionTime < __rhs.transactionTime)
        {
            return true;
        }
        else if(__rhs.transactionTime < transactionTime)
        {
            return false;
        }
        if(sellerSecondPwd < __rhs.sellerSecondPwd)
        {
            return true;
        }
        else if(__rhs.sellerSecondPwd < sellerSecondPwd)
        {
            return false;
        }
        if(buyerActor < __rhs.buyerActor)
        {
            return true;
        }
        else if(__rhs.buyerActor < buyerActor)
        {
            return false;
        }
        if(buyerLevel < __rhs.buyerLevel)
        {
            return true;
        }
        else if(__rhs.buyerLevel < buyerLevel)
        {
            return false;
        }
        if(buyerMoney < __rhs.buyerMoney)
        {
            return true;
        }
        else if(__rhs.buyerMoney < buyerMoney)
        {
            return false;
        }
        if(sellerIndex < __rhs.sellerIndex)
        {
            return true;
        }
        else if(__rhs.sellerIndex < sellerIndex)
        {
            return false;
        }
        if(sellerGroup < __rhs.sellerGroup)
        {
            return true;
        }
        else if(__rhs.sellerGroup < sellerGroup)
        {
            return false;
        }
        if(bankPwd < __rhs.bankPwd)
        {
            return true;
        }
        else if(__rhs.bankPwd < bankPwd)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameWorkSheetPostT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameWorkSheetPostT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameWorkSheetPostT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameWorkSheetPostT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameWorkSheetAccountAuditT
{
    ::std::string sellerActor;
    ::std::string sellerSecondPwd;
    ::Ice::Int sellerIndex;
    ::Ice::Int sellerGroup;
    ::std::string bankPwd;

    bool operator==(const GameWorkSheetAccountAuditT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(sellerActor != __rhs.sellerActor)
        {
            return false;
        }
        if(sellerSecondPwd != __rhs.sellerSecondPwd)
        {
            return false;
        }
        if(sellerIndex != __rhs.sellerIndex)
        {
            return false;
        }
        if(sellerGroup != __rhs.sellerGroup)
        {
            return false;
        }
        if(bankPwd != __rhs.bankPwd)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameWorkSheetAccountAuditT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(sellerActor < __rhs.sellerActor)
        {
            return true;
        }
        else if(__rhs.sellerActor < sellerActor)
        {
            return false;
        }
        if(sellerSecondPwd < __rhs.sellerSecondPwd)
        {
            return true;
        }
        else if(__rhs.sellerSecondPwd < sellerSecondPwd)
        {
            return false;
        }
        if(sellerIndex < __rhs.sellerIndex)
        {
            return true;
        }
        else if(__rhs.sellerIndex < sellerIndex)
        {
            return false;
        }
        if(sellerGroup < __rhs.sellerGroup)
        {
            return true;
        }
        else if(__rhs.sellerGroup < sellerGroup)
        {
            return false;
        }
        if(bankPwd < __rhs.bankPwd)
        {
            return true;
        }
        else if(__rhs.bankPwd < bankPwd)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameWorkSheetAccountAuditT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameWorkSheetAccountAuditT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameWorkSheetAccountAuditT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameWorkSheetAccountAuditT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameWorkSheetVerifyT
{
    ::std::string sellerActor;
    ::Ice::Int level;
    ::Ice::Long money;
    ::Ice::Int verifyTime;
    ::std::string sellerSecondPwd;
    ::Ice::Int sellerIndex;
    ::Ice::Int sellerGroup;
    ::std::string bankPwd;

    bool operator==(const GameWorkSheetVerifyT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(sellerActor != __rhs.sellerActor)
        {
            return false;
        }
        if(level != __rhs.level)
        {
            return false;
        }
        if(money != __rhs.money)
        {
            return false;
        }
        if(verifyTime != __rhs.verifyTime)
        {
            return false;
        }
        if(sellerSecondPwd != __rhs.sellerSecondPwd)
        {
            return false;
        }
        if(sellerIndex != __rhs.sellerIndex)
        {
            return false;
        }
        if(sellerGroup != __rhs.sellerGroup)
        {
            return false;
        }
        if(bankPwd != __rhs.bankPwd)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameWorkSheetVerifyT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(sellerActor < __rhs.sellerActor)
        {
            return true;
        }
        else if(__rhs.sellerActor < sellerActor)
        {
            return false;
        }
        if(level < __rhs.level)
        {
            return true;
        }
        else if(__rhs.level < level)
        {
            return false;
        }
        if(money < __rhs.money)
        {
            return true;
        }
        else if(__rhs.money < money)
        {
            return false;
        }
        if(verifyTime < __rhs.verifyTime)
        {
            return true;
        }
        else if(__rhs.verifyTime < verifyTime)
        {
            return false;
        }
        if(sellerSecondPwd < __rhs.sellerSecondPwd)
        {
            return true;
        }
        else if(__rhs.sellerSecondPwd < sellerSecondPwd)
        {
            return false;
        }
        if(sellerIndex < __rhs.sellerIndex)
        {
            return true;
        }
        else if(__rhs.sellerIndex < sellerIndex)
        {
            return false;
        }
        if(sellerGroup < __rhs.sellerGroup)
        {
            return true;
        }
        else if(__rhs.sellerGroup < sellerGroup)
        {
            return false;
        }
        if(bankPwd < __rhs.bankPwd)
        {
            return true;
        }
        else if(__rhs.bankPwd < bankPwd)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameWorkSheetVerifyT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameWorkSheetVerifyT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameWorkSheetVerifyT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameWorkSheetVerifyT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameTaskletT
{
    ::std::string id;
    ::Ice::Int type;
    ::std::string no;
    ::std::string gameId;
    ::std::string account;
    ::std::string password;
    ::std::string area;
    ::std::string server;
    ::std::string lineName;
    ::Ice::Short lineNo;
    ::std::string createTime;
    ::std::string secretKey;
    ::gtr::GameWorkSheetPostT post;
    ::gtr::GameWorkSheetAccountAuditT audit;
    ::gtr::GameWorkSheetVerifyT verify;

    bool operator==(const GameTaskletT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(gameId != __rhs.gameId)
        {
            return false;
        }
        if(account != __rhs.account)
        {
            return false;
        }
        if(password != __rhs.password)
        {
            return false;
        }
        if(area != __rhs.area)
        {
            return false;
        }
        if(server != __rhs.server)
        {
            return false;
        }
        if(lineName != __rhs.lineName)
        {
            return false;
        }
        if(lineNo != __rhs.lineNo)
        {
            return false;
        }
        if(createTime != __rhs.createTime)
        {
            return false;
        }
        if(secretKey != __rhs.secretKey)
        {
            return false;
        }
        if(post != __rhs.post)
        {
            return false;
        }
        if(audit != __rhs.audit)
        {
            return false;
        }
        if(verify != __rhs.verify)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameTaskletT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(gameId < __rhs.gameId)
        {
            return true;
        }
        else if(__rhs.gameId < gameId)
        {
            return false;
        }
        if(account < __rhs.account)
        {
            return true;
        }
        else if(__rhs.account < account)
        {
            return false;
        }
        if(password < __rhs.password)
        {
            return true;
        }
        else if(__rhs.password < password)
        {
            return false;
        }
        if(area < __rhs.area)
        {
            return true;
        }
        else if(__rhs.area < area)
        {
            return false;
        }
        if(server < __rhs.server)
        {
            return true;
        }
        else if(__rhs.server < server)
        {
            return false;
        }
        if(lineName < __rhs.lineName)
        {
            return true;
        }
        else if(__rhs.lineName < lineName)
        {
            return false;
        }
        if(lineNo < __rhs.lineNo)
        {
            return true;
        }
        else if(__rhs.lineNo < lineNo)
        {
            return false;
        }
        if(createTime < __rhs.createTime)
        {
            return true;
        }
        else if(__rhs.createTime < createTime)
        {
            return false;
        }
        if(secretKey < __rhs.secretKey)
        {
            return true;
        }
        else if(__rhs.secretKey < secretKey)
        {
            return false;
        }
        if(post < __rhs.post)
        {
            return true;
        }
        else if(__rhs.post < post)
        {
            return false;
        }
        if(audit < __rhs.audit)
        {
            return true;
        }
        else if(__rhs.audit < audit)
        {
            return false;
        }
        if(verify < __rhs.verify)
        {
            return true;
        }
        else if(__rhs.verify < verify)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameTaskletT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameTaskletT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameTaskletT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameTaskletT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameTaskResultT
{
    ::std::string id;
    ::std::string no;
    ::Ice::Int type;
    ::std::string gameId;
    ::Ice::Int result;
    ::std::string errmsg;

    bool operator==(const GameTaskResultT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(gameId != __rhs.gameId)
        {
            return false;
        }
        if(result != __rhs.result)
        {
            return false;
        }
        if(errmsg != __rhs.errmsg)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameTaskResultT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(gameId < __rhs.gameId)
        {
            return true;
        }
        else if(__rhs.gameId < gameId)
        {
            return false;
        }
        if(result < __rhs.result)
        {
            return true;
        }
        else if(__rhs.result < result)
        {
            return false;
        }
        if(errmsg < __rhs.errmsg)
        {
            return true;
        }
        else if(__rhs.errmsg < errmsg)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameTaskResultT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameTaskResultT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameTaskResultT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameTaskResultT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct GameInfoT
{
    ::Ice::Int id;
    ::std::string name;
    ::std::string version;

    bool operator==(const GameInfoT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(version != __rhs.version)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameInfoT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(version < __rhs.version)
        {
            return true;
        }
        else if(__rhs.version < version)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameInfoT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameInfoT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameInfoT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameInfoT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::gtr::GameInfoT> GameInfoListT;
void __writeGameInfoListT(::IceInternal::BasicStream*, const ::gtr::GameInfoT*, const ::gtr::GameInfoT*);
void __readGameInfoListT(::IceInternal::BasicStream*, GameInfoListT&);

struct GameRobotInfoT
{
    ::std::string id;
    ::std::string ip;
    ::Ice::Int network;
    ::gtr::GameInfoListT supportGames;

    bool operator==(const GameRobotInfoT& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(ip != __rhs.ip)
        {
            return false;
        }
        if(network != __rhs.network)
        {
            return false;
        }
        if(supportGames != __rhs.supportGames)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GameRobotInfoT& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(ip < __rhs.ip)
        {
            return true;
        }
        else if(__rhs.ip < ip)
        {
            return false;
        }
        if(network < __rhs.network)
        {
            return true;
        }
        else if(__rhs.network < network)
        {
            return false;
        }
        if(supportGames < __rhs.supportGames)
        {
            return true;
        }
        else if(__rhs.supportGames < supportGames)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GameRobotInfoT& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GameRobotInfoT& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GameRobotInfoT& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GameRobotInfoT& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace gtr
{

class Callback_IService_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IService_getType_Base> Callback_IService_getTypePtr;

class Callback_IService_getId_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IService_getId_Base> Callback_IService_getIdPtr;

class Callback_IService_getTimestamp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IService_getTimestamp_Base> Callback_IService_getTimestampPtr;

class Callback_IService_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IService_shutdown_Base> Callback_IService_shutdownPtr;

class Callback_IService_heartbeat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IService_heartbeat_Base> Callback_IService_heartbeatPtr;

class Callback_IAnswerEndpoint_getRemains_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnswerEndpoint_getRemains_Base> Callback_IAnswerEndpoint_getRemainsPtr;

class Callback_IAnswerEndpoint_addQuestion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IAnswerEndpoint_addQuestion_Base> Callback_IAnswerEndpoint_addQuestionPtr;

class Callback_IQuestionAsker_answerResult_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuestionAsker_answerResult_Base> Callback_IQuestionAsker_answerResultPtr;

class Callback_IQuestionServer_answer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuestionServer_answer_Base> Callback_IQuestionServer_answerPtr;

class Callback_IQuestionServer_answerResult_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuestionServer_answerResult_Base> Callback_IQuestionServer_answerResultPtr;

class Callback_IQuestionServer_login_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuestionServer_login_Base> Callback_IQuestionServer_loginPtr;

class Callback_IQuestionServer_logout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuestionServer_logout_Base> Callback_IQuestionServer_logoutPtr;

class Callback_IQuestionServer_verifyAnswer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IQuestionServer_verifyAnswer_Base> Callback_IQuestionServer_verifyAnswerPtr;

class Callback_ILogger_gameMsg_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILogger_gameMsg_Base> Callback_ILogger_gameMsgPtr;

class Callback_ILogger_gameImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILogger_gameImage_Base> Callback_ILogger_gameImagePtr;

class Callback_IGameHost_getTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IGameHost_getTask_Base> Callback_IGameHost_getTaskPtr;

class Callback_IGameHost_completeTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IGameHost_completeTask_Base> Callback_IGameHost_completeTaskPtr;

class Callback_IGameHost_answer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IGameHost_answer_Base> Callback_IGameHost_answerPtr;

class Callback_IGameHost_verifyAnswer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IGameHost_verifyAnswer_Base> Callback_IGameHost_verifyAnswerPtr;

class Callback_IGtrServer_getTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IGtrServer_getTask_Base> Callback_IGtrServer_getTaskPtr;

class Callback_IGtrServer_completeTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IGtrServer_completeTask_Base> Callback_IGtrServer_completeTaskPtr;

}

namespace IceProxy
{

namespace gtr
{

class IService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getType()
    {
        return getType(0);
    }
    ::Ice::Int getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::gtr::Callback_IService_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::gtr::Callback_IService_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::gtr::ServiceIdentifyT getId()
    {
        return getId(0);
    }
    ::gtr::ServiceIdentifyT getId(const ::Ice::Context& __ctx)
    {
        return getId(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getId()
    {
        return begin_getId(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context& __ctx)
    {
        return begin_getId(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::gtr::Callback_IService_getIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context& __ctx, const ::gtr::Callback_IService_getIdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getId(&__ctx, __del, __cookie);
    }

    ::gtr::ServiceIdentifyT end_getId(const ::Ice::AsyncResultPtr&);
    
private:

    ::gtr::ServiceIdentifyT getId(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getId(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getTimestamp()
    {
        return getTimestamp(0);
    }
    ::Ice::Int getTimestamp(const ::Ice::Context& __ctx)
    {
        return getTimestamp(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTimestamp()
    {
        return begin_getTimestamp(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimestamp(const ::Ice::Context& __ctx)
    {
        return begin_getTimestamp(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimestamp(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimestamp(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimestamp(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimestamp(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimestamp(const ::gtr::Callback_IService_getTimestampPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimestamp(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimestamp(const ::Ice::Context& __ctx, const ::gtr::Callback_IService_getTimestampPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimestamp(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getTimestamp(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getTimestamp(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTimestamp(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::gtr::Callback_IService_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::gtr::Callback_IService_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void heartbeat(const ::std::string& senderType, const ::std::string& senderId)
    {
        heartbeat(senderType, senderId, 0);
    }
    void heartbeat(const ::std::string& senderType, const ::std::string& senderId, const ::Ice::Context& __ctx)
    {
        heartbeat(senderType, senderId, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string& senderType, const ::std::string& senderId)
    {
        return begin_heartbeat(senderType, senderId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string& senderType, const ::std::string& senderId, const ::Ice::Context& __ctx)
    {
        return begin_heartbeat(senderType, senderId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string& senderType, const ::std::string& senderId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(senderType, senderId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string& senderType, const ::std::string& senderId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(senderType, senderId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string& senderType, const ::std::string& senderId, const ::gtr::Callback_IService_heartbeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(senderType, senderId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string& senderType, const ::std::string& senderId, const ::Ice::Context& __ctx, const ::gtr::Callback_IService_heartbeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(senderType, senderId, &__ctx, __del, __cookie);
    }

    void end_heartbeat(const ::Ice::AsyncResultPtr&);
    
private:

    void heartbeat(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_heartbeat(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IService> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IService> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IService*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class IAnswerEndpoint : virtual public ::IceProxy::gtr::IService
{
public:

    ::Ice::Int getRemains()
    {
        return getRemains(0);
    }
    ::Ice::Int getRemains(const ::Ice::Context& __ctx)
    {
        return getRemains(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRemains()
    {
        return begin_getRemains(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRemains(const ::Ice::Context& __ctx)
    {
        return begin_getRemains(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRemains(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRemains(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRemains(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRemains(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRemains(const ::gtr::Callback_IAnswerEndpoint_getRemainsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRemains(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRemains(const ::Ice::Context& __ctx, const ::gtr::Callback_IAnswerEndpoint_getRemainsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRemains(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getRemains(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getRemains(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRemains(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question)
    {
        return addQuestion(server, no, createTime, question, 0);
    }
    ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx)
    {
        return addQuestion(server, no, createTime, question, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question)
    {
        return begin_addQuestion(server, no, createTime, question, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx)
    {
        return begin_addQuestion(server, no, createTime, question, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQuestion(server, no, createTime, question, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQuestion(server, no, createTime, question, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question, const ::gtr::Callback_IAnswerEndpoint_addQuestionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQuestion(server, no, createTime, question, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx& server, const ::std::string& no, const ::std::string& createTime, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx, const ::gtr::Callback_IAnswerEndpoint_addQuestionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addQuestion(server, no, createTime, question, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_addQuestion(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx&, const ::std::string&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addQuestion(const ::gtr::IQuestionServerPrx&, const ::std::string&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IAnswerEndpoint> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IAnswerEndpoint*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IAnswerEndpoint*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class IQuestionAsker : virtual public ::IceProxy::Ice::Object
{
public:

    void answerResult(const ::std::string& no, const ::std::string& result)
    {
        answerResult(no, result, 0);
    }
    void answerResult(const ::std::string& no, const ::std::string& result, const ::Ice::Context& __ctx)
    {
        answerResult(no, result, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::std::string& result)
    {
        return begin_answerResult(no, result, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::std::string& result, const ::Ice::Context& __ctx)
    {
        return begin_answerResult(no, result, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::std::string& result, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::std::string& result, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::std::string& result, const ::gtr::Callback_IQuestionAsker_answerResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::std::string& result, const ::Ice::Context& __ctx, const ::gtr::Callback_IQuestionAsker_answerResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, &__ctx, __del, __cookie);
    }

    void end_answerResult(const ::Ice::AsyncResultPtr&);
    
private:

    void answerResult(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionAsker> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionAsker*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IQuestionAsker*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class IQuestionServer : virtual public ::IceProxy::Ice::Object
{
public:

    void answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question)
    {
        answer(asker, no, question, 0);
    }
    void answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx)
    {
        answer(asker, no, question, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question)
    {
        return begin_answer(asker, no, question, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx)
    {
        return begin_answer(asker, no, question, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(asker, no, question, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(asker, no, question, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question, const ::gtr::Callback_IQuestionServer_answerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(asker, no, question, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx& asker, const ::std::string& no, const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx, const ::gtr::Callback_IQuestionServer_answerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(asker, no, question, &__ctx, __del, __cookie);
    }

    void end_answer(const ::Ice::AsyncResultPtr&);
    
private:

    void answer(const ::gtr::IQuestionAskerPrx&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_answer(const ::gtr::IQuestionAskerPrx&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result)
    {
        answerResult(no, result, 0);
    }
    void answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result, const ::Ice::Context& __ctx)
    {
        answerResult(no, result, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result)
    {
        return begin_answerResult(no, result, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result, const ::Ice::Context& __ctx)
    {
        return begin_answerResult(no, result, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result, const ::gtr::Callback_IQuestionServer_answerResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string& no, const ::gtr::QuestionResultT& result, const ::Ice::Context& __ctx, const ::gtr::Callback_IQuestionServer_answerResultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answerResult(no, result, &__ctx, __del, __cookie);
    }

    void end_answerResult(const ::Ice::AsyncResultPtr&);
    
private:

    void answerResult(const ::std::string&, const ::gtr::QuestionResultT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_answerResult(const ::std::string&, const ::gtr::QuestionResultT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd)
    {
        return login(answer, worker, passwd, 0);
    }
    ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd, const ::Ice::Context& __ctx)
    {
        return login(answer, worker, passwd, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd)
    {
        return begin_login(answer, worker, passwd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd, const ::Ice::Context& __ctx)
    {
        return begin_login(answer, worker, passwd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(answer, worker, passwd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(answer, worker, passwd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd, const ::gtr::Callback_IQuestionServer_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(answer, worker, passwd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::std::string& passwd, const ::Ice::Context& __ctx, const ::gtr::Callback_IQuestionServer_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(answer, worker, passwd, &__ctx, __del, __cookie);
    }

    ::gtr::CallReturnT end_login(const ::Ice::AsyncResultPtr&);
    
private:

    ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_login(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker)
    {
        logout(answer, worker, 0);
    }
    void logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::Ice::Context& __ctx)
    {
        logout(answer, worker, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker)
    {
        return begin_logout(answer, worker, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::Ice::Context& __ctx)
    {
        return begin_logout(answer, worker, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(answer, worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(answer, worker, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::gtr::Callback_IQuestionServer_logoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(answer, worker, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx& answer, const ::std::string& worker, const ::Ice::Context& __ctx, const ::gtr::Callback_IQuestionServer_logoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(answer, worker, &__ctx, __del, __cookie);
    }

    void end_logout(const ::Ice::AsyncResultPtr&);
    
private:

    void logout(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_logout(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ)
    {
        verifyAnswer(no, type, succ, 0);
    }
    void verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ, const ::Ice::Context& __ctx)
    {
        verifyAnswer(no, type, succ, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ)
    {
        return begin_verifyAnswer(no, type, succ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ, const ::Ice::Context& __ctx)
    {
        return begin_verifyAnswer(no, type, succ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(no, type, succ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(no, type, succ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ, const ::gtr::Callback_IQuestionServer_verifyAnswerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(no, type, succ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string& no, ::Ice::Int type, bool succ, const ::Ice::Context& __ctx, const ::gtr::Callback_IQuestionServer_verifyAnswerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(no, type, succ, &__ctx, __del, __cookie);
    }

    void end_verifyAnswer(const ::Ice::AsyncResultPtr&);
    
private:

    void verifyAnswer(const ::std::string&, ::Ice::Int, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_verifyAnswer(const ::std::string&, ::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IQuestionServer> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IQuestionServer*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IQuestionServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ILogger : virtual public ::IceProxy::Ice::Object
{
public:

    void gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg)
    {
        gameMsg(gameId, timetick, msg, 0);
    }
    void gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg, const ::Ice::Context& __ctx)
    {
        gameMsg(gameId, timetick, msg, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg)
    {
        return begin_gameMsg(gameId, timetick, msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg, const ::Ice::Context& __ctx)
    {
        return begin_gameMsg(gameId, timetick, msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameMsg(gameId, timetick, msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameMsg(gameId, timetick, msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg, const ::gtr::Callback_ILogger_gameMsgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameMsg(gameId, timetick, msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::gtr::LogMessageT& msg, const ::Ice::Context& __ctx, const ::gtr::Callback_ILogger_gameMsgPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameMsg(gameId, timetick, msg, &__ctx, __del, __cookie);
    }

    void end_gameMsg(const ::Ice::AsyncResultPtr&);
    
private:

    void gameMsg(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::gtr::LogMessageT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_gameMsg(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::gtr::LogMessageT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image)
    {
        gameImage(gameId, timetick, opName, image, 0);
    }
    void gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image, const ::Ice::Context& __ctx)
    {
        gameImage(gameId, timetick, opName, image, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image)
    {
        return begin_gameImage(gameId, timetick, opName, image, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image, const ::Ice::Context& __ctx)
    {
        return begin_gameImage(gameId, timetick, opName, image, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameImage(gameId, timetick, opName, image, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameImage(gameId, timetick, opName, image, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image, const ::gtr::Callback_ILogger_gameImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameImage(gameId, timetick, opName, image, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT& gameId, ::Ice::Int timetick, const ::std::string& opName, const ::gtr::ImageDataT& image, const ::Ice::Context& __ctx, const ::gtr::Callback_ILogger_gameImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_gameImage(gameId, timetick, opName, image, &__ctx, __del, __cookie);
    }

    void end_gameImage(const ::Ice::AsyncResultPtr&);
    
private:

    void gameImage(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::std::string&, const ::gtr::ImageDataT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_gameImage(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::std::string&, const ::gtr::ImageDataT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ILogger> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogger> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogger*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ILogger*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ILogServer : virtual public ::IceProxy::gtr::ILogger,
                   virtual public ::IceProxy::gtr::IService
{
public:
    
    ::IceInternal::ProxyHandle<ILogServer> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ILogServer> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ILogServer*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ILogServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class IGameHost : virtual public ::IceProxy::gtr::IQuestionAsker,
                  virtual public ::IceProxy::gtr::IService,
                  virtual public ::IceProxy::gtr::ILogger
{
public:

    ::gtr::GameTaskletT getTask()
    {
        return getTask(0);
    }
    ::gtr::GameTaskletT getTask(const ::Ice::Context& __ctx)
    {
        return getTask(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTask()
    {
        return begin_getTask(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::Ice::Context& __ctx)
    {
        return begin_getTask(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::Callback_IGameHost_getTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::Ice::Context& __ctx, const ::gtr::Callback_IGameHost_getTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(&__ctx, __del, __cookie);
    }

    ::gtr::GameTaskletT end_getTask(const ::Ice::AsyncResultPtr&);
    
private:

    ::gtr::GameTaskletT getTask(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTask(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void completeTask(const ::gtr::GameTaskResultT& result)
    {
        completeTask(result, 0);
    }
    void completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx)
    {
        completeTask(result, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result)
    {
        return begin_completeTask(result, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx)
    {
        return begin_completeTask(result, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::gtr::Callback_IGameHost_completeTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx, const ::gtr::Callback_IGameHost_completeTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, &__ctx, __del, __cookie);
    }

    void end_completeTask(const ::Ice::AsyncResultPtr&);
    
private:

    void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string answer(const ::gtr::QuestionContentT& question)
    {
        return answer(question, 0);
    }
    ::std::string answer(const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx)
    {
        return answer(question, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT& question)
    {
        return begin_answer(question, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx)
    {
        return begin_answer(question, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT& question, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(question, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(question, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT& question, const ::gtr::Callback_IGameHost_answerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(question, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT& question, const ::Ice::Context& __ctx, const ::gtr::Callback_IGameHost_answerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_answer(question, &__ctx, __del, __cookie);
    }

    ::std::string end_answer(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string answer(const ::gtr::QuestionContentT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_answer(const ::gtr::QuestionContentT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void verifyAnswer(::Ice::Int type, bool succ)
    {
        verifyAnswer(type, succ, 0);
    }
    void verifyAnswer(::Ice::Int type, bool succ, const ::Ice::Context& __ctx)
    {
        verifyAnswer(type, succ, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int type, bool succ)
    {
        return begin_verifyAnswer(type, succ, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int type, bool succ, const ::Ice::Context& __ctx)
    {
        return begin_verifyAnswer(type, succ, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int type, bool succ, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(type, succ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int type, bool succ, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(type, succ, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int type, bool succ, const ::gtr::Callback_IGameHost_verifyAnswerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(type, succ, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int type, bool succ, const ::Ice::Context& __ctx, const ::gtr::Callback_IGameHost_verifyAnswerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_verifyAnswer(type, succ, &__ctx, __del, __cookie);
    }

    void end_verifyAnswer(const ::Ice::AsyncResultPtr&);
    
private:

    void verifyAnswer(::Ice::Int, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_verifyAnswer(::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IGameHost> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGameHost> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGameHost*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IGameHost*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class IGtrServer : virtual public ::IceProxy::gtr::IService,
                   virtual public ::IceProxy::gtr::IQuestionServer
{
public:

    ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT& robot)
    {
        return getTask(robot, 0);
    }
    ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT& robot, const ::Ice::Context& __ctx)
    {
        return getTask(robot, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT& robot)
    {
        return begin_getTask(robot, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT& robot, const ::Ice::Context& __ctx)
    {
        return begin_getTask(robot, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT& robot, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(robot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT& robot, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(robot, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT& robot, const ::gtr::Callback_IGtrServer_getTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(robot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT& robot, const ::Ice::Context& __ctx, const ::gtr::Callback_IGtrServer_getTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTask(robot, &__ctx, __del, __cookie);
    }

    ::gtr::GameTaskletT end_getTask(const ::Ice::AsyncResultPtr&);
    
private:

    ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTask(const ::gtr::GameRobotInfoT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void completeTask(const ::gtr::GameTaskResultT& result)
    {
        completeTask(result, 0);
    }
    void completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx)
    {
        completeTask(result, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result)
    {
        return begin_completeTask(result, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx)
    {
        return begin_completeTask(result, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::gtr::Callback_IGtrServer_completeTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT& result, const ::Ice::Context& __ctx, const ::gtr::Callback_IGtrServer_completeTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_completeTask(result, &__ctx, __del, __cookie);
    }

    void end_completeTask(const ::Ice::AsyncResultPtr&);
    
private:

    void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<IGtrServer> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<IGtrServer*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<IGtrServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace gtr
{

class IService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getType(const ::Ice::Context*) = 0;

    virtual ::gtr::ServiceIdentifyT getId(const ::Ice::Context*) = 0;

    virtual ::Ice::Int getTimestamp(const ::Ice::Context*) = 0;

    virtual void shutdown(const ::Ice::Context*) = 0;

    virtual void heartbeat(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;
};

class IAnswerEndpoint : virtual public ::IceDelegate::gtr::IService
{
public:

    virtual ::Ice::Int getRemains(const ::Ice::Context*) = 0;

    virtual ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx&, const ::std::string&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*) = 0;
};

class IQuestionAsker : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void answerResult(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;
};

class IQuestionServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void answer(const ::gtr::IQuestionAskerPrx&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*) = 0;

    virtual void answerResult(const ::std::string&, const ::gtr::QuestionResultT&, const ::Ice::Context*) = 0;

    virtual ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual void logout(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual void verifyAnswer(const ::std::string&, ::Ice::Int, bool, const ::Ice::Context*) = 0;
};

class ILogger : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void gameMsg(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::gtr::LogMessageT&, const ::Ice::Context*) = 0;

    virtual void gameImage(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::std::string&, const ::gtr::ImageDataT&, const ::Ice::Context*) = 0;
};

class ILogServer : virtual public ::IceDelegate::gtr::ILogger,
                   virtual public ::IceDelegate::gtr::IService
{
public:
};

class IGameHost : virtual public ::IceDelegate::gtr::IQuestionAsker,
                  virtual public ::IceDelegate::gtr::IService,
                  virtual public ::IceDelegate::gtr::ILogger
{
public:

    virtual ::gtr::GameTaskletT getTask(const ::Ice::Context*) = 0;

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*) = 0;

    virtual ::std::string answer(const ::gtr::QuestionContentT&, const ::Ice::Context*) = 0;

    virtual void verifyAnswer(::Ice::Int, bool, const ::Ice::Context*) = 0;
};

class IGtrServer : virtual public ::IceDelegate::gtr::IService,
                   virtual public ::IceDelegate::gtr::IQuestionServer
{
public:

    virtual ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT&, const ::Ice::Context*) = 0;

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace gtr
{

class IService : virtual public ::IceDelegate::gtr::IService,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getType(const ::Ice::Context*);

    virtual ::gtr::ServiceIdentifyT getId(const ::Ice::Context*);

    virtual ::Ice::Int getTimestamp(const ::Ice::Context*);

    virtual void shutdown(const ::Ice::Context*);

    virtual void heartbeat(const ::std::string&, const ::std::string&, const ::Ice::Context*);
};

class IAnswerEndpoint : virtual public ::IceDelegate::gtr::IAnswerEndpoint,
                        virtual public ::IceDelegateM::gtr::IService
{
public:

    virtual ::Ice::Int getRemains(const ::Ice::Context*);

    virtual ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx&, const ::std::string&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*);
};

class IQuestionAsker : virtual public ::IceDelegate::gtr::IQuestionAsker,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void answerResult(const ::std::string&, const ::std::string&, const ::Ice::Context*);
};

class IQuestionServer : virtual public ::IceDelegate::gtr::IQuestionServer,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void answer(const ::gtr::IQuestionAskerPrx&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*);

    virtual void answerResult(const ::std::string&, const ::gtr::QuestionResultT&, const ::Ice::Context*);

    virtual ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void logout(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::Ice::Context*);

    virtual void verifyAnswer(const ::std::string&, ::Ice::Int, bool, const ::Ice::Context*);
};

class ILogger : virtual public ::IceDelegate::gtr::ILogger,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void gameMsg(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::gtr::LogMessageT&, const ::Ice::Context*);

    virtual void gameImage(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::std::string&, const ::gtr::ImageDataT&, const ::Ice::Context*);
};

class ILogServer : virtual public ::IceDelegate::gtr::ILogServer,
                   virtual public ::IceDelegateM::gtr::ILogger,
                   virtual public ::IceDelegateM::gtr::IService
{
public:
};

class IGameHost : virtual public ::IceDelegate::gtr::IGameHost,
                  virtual public ::IceDelegateM::gtr::IQuestionAsker,
                  virtual public ::IceDelegateM::gtr::IService,
                  virtual public ::IceDelegateM::gtr::ILogger
{
public:

    virtual ::gtr::GameTaskletT getTask(const ::Ice::Context*);

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*);

    virtual ::std::string answer(const ::gtr::QuestionContentT&, const ::Ice::Context*);

    virtual void verifyAnswer(::Ice::Int, bool, const ::Ice::Context*);
};

class IGtrServer : virtual public ::IceDelegate::gtr::IGtrServer,
                   virtual public ::IceDelegateM::gtr::IService,
                   virtual public ::IceDelegateM::gtr::IQuestionServer
{
public:

    virtual ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT&, const ::Ice::Context*);

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace gtr
{

class IService : virtual public ::IceDelegate::gtr::IService,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getType(const ::Ice::Context*);

    virtual ::gtr::ServiceIdentifyT getId(const ::Ice::Context*);

    virtual ::Ice::Int getTimestamp(const ::Ice::Context*);

    virtual void shutdown(const ::Ice::Context*);

    virtual void heartbeat(const ::std::string&, const ::std::string&, const ::Ice::Context*);
};

class IAnswerEndpoint : virtual public ::IceDelegate::gtr::IAnswerEndpoint,
                        virtual public ::IceDelegateD::gtr::IService
{
public:

    virtual ::Ice::Int getRemains(const ::Ice::Context*);

    virtual ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx&, const ::std::string&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*);
};

class IQuestionAsker : virtual public ::IceDelegate::gtr::IQuestionAsker,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void answerResult(const ::std::string&, const ::std::string&, const ::Ice::Context*);
};

class IQuestionServer : virtual public ::IceDelegate::gtr::IQuestionServer,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void answer(const ::gtr::IQuestionAskerPrx&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Context*);

    virtual void answerResult(const ::std::string&, const ::gtr::QuestionResultT&, const ::Ice::Context*);

    virtual ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void logout(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::Ice::Context*);

    virtual void verifyAnswer(const ::std::string&, ::Ice::Int, bool, const ::Ice::Context*);
};

class ILogger : virtual public ::IceDelegate::gtr::ILogger,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void gameMsg(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::gtr::LogMessageT&, const ::Ice::Context*);

    virtual void gameImage(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::std::string&, const ::gtr::ImageDataT&, const ::Ice::Context*);
};

class ILogServer : virtual public ::IceDelegate::gtr::ILogServer,
                   virtual public ::IceDelegateD::gtr::ILogger,
                   virtual public ::IceDelegateD::gtr::IService
{
public:
};

class IGameHost : virtual public ::IceDelegate::gtr::IGameHost,
                  virtual public ::IceDelegateD::gtr::IQuestionAsker,
                  virtual public ::IceDelegateD::gtr::IService,
                  virtual public ::IceDelegateD::gtr::ILogger
{
public:

    virtual ::gtr::GameTaskletT getTask(const ::Ice::Context*);

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*);

    virtual ::std::string answer(const ::gtr::QuestionContentT&, const ::Ice::Context*);

    virtual void verifyAnswer(::Ice::Int, bool, const ::Ice::Context*);
};

class IGtrServer : virtual public ::IceDelegate::gtr::IGtrServer,
                   virtual public ::IceDelegateD::gtr::IService,
                   virtual public ::IceDelegateD::gtr::IQuestionServer
{
public:

    virtual ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT&, const ::Ice::Context*);

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Context*);
};

}

}

namespace gtr
{

class IService : virtual public ::Ice::Object
{
public:

    typedef IServicePrx ProxyType;
    typedef IServicePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::gtr::ServiceIdentifyT getId(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getId(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getTimestamp(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTimestamp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void heartbeat(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___heartbeat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IService& l, const IService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IService& l, const IService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class IAnswerEndpoint : virtual public ::gtr::IService
{
public:

    typedef IAnswerEndpointPrx ProxyType;
    typedef IAnswerEndpointPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getRemains(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRemains(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int addQuestion(const ::gtr::IQuestionServerPrx&, const ::std::string&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addQuestion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IAnswerEndpoint& l, const IAnswerEndpoint& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IAnswerEndpoint& l, const IAnswerEndpoint& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class IQuestionAsker : virtual public ::Ice::Object
{
public:

    typedef IQuestionAskerPrx ProxyType;
    typedef IQuestionAskerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void answerResult(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___answerResult(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IQuestionAsker& l, const IQuestionAsker& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IQuestionAsker& l, const IQuestionAsker& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class IQuestionServer : virtual public ::Ice::Object
{
public:

    typedef IQuestionServerPrx ProxyType;
    typedef IQuestionServerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void answer(const ::gtr::IQuestionAskerPrx&, const ::std::string&, const ::gtr::QuestionContentT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___answer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void answerResult(const ::std::string&, const ::gtr::QuestionResultT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___answerResult(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::gtr::CallReturnT login(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void logout(const ::gtr::IAnswerEndpointPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___logout(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void verifyAnswer(const ::std::string&, ::Ice::Int, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___verifyAnswer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IQuestionServer& l, const IQuestionServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IQuestionServer& l, const IQuestionServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ILogger : virtual public ::Ice::Object
{
public:

    typedef ILoggerPrx ProxyType;
    typedef ILoggerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void gameMsg(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::gtr::LogMessageT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___gameMsg(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void gameImage(const ::gtr::GameIdentifyT&, ::Ice::Int, const ::std::string&, const ::gtr::ImageDataT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___gameImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const ILogger& l, const ILogger& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ILogger& l, const ILogger& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ILogServer : virtual public ::gtr::ILogger,
                   virtual public ::gtr::IService
{
public:

    typedef ILogServerPrx ProxyType;
    typedef ILogServerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const ILogServer& l, const ILogServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ILogServer& l, const ILogServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class IGameHost : virtual public ::gtr::IQuestionAsker,
                  virtual public ::gtr::IService,
                  virtual public ::gtr::ILogger
{
public:

    typedef IGameHostPrx ProxyType;
    typedef IGameHostPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::gtr::GameTaskletT getTask(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___completeTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string answer(const ::gtr::QuestionContentT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___answer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void verifyAnswer(::Ice::Int, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___verifyAnswer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IGameHost& l, const IGameHost& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IGameHost& l, const IGameHost& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class IGtrServer : virtual public ::gtr::IService,
                   virtual public ::gtr::IQuestionServer
{
public:

    typedef IGtrServerPrx ProxyType;
    typedef IGtrServerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::gtr::GameTaskletT getTask(const ::gtr::GameRobotInfoT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void completeTask(const ::gtr::GameTaskResultT&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___completeTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const IGtrServer& l, const IGtrServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IGtrServer& l, const IGtrServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace gtr
{

template<class T>
class CallbackNC_IService_getType : public Callback_IService_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_IService_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IServicePrx __proxy = ::gtr::IServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IService_getTypePtr
newCallback_IService_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_getTypePtr
newCallback_IService_getType(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IService_getType : public Callback_IService_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_IService_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IServicePrx __proxy = ::gtr::IServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IService_getTypePtr
newCallback_IService_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_getTypePtr
newCallback_IService_getType(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IService_getId : public Callback_IService_getId_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::gtr::ServiceIdentifyT&);

    CallbackNC_IService_getId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IServicePrx __proxy = ::gtr::IServicePrx::uncheckedCast(__result->getProxy());
        ::gtr::ServiceIdentifyT __ret;
        try
        {
            __ret = __proxy->end_getId(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IService_getIdPtr
newCallback_IService_getId(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::ServiceIdentifyT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_getId<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_getIdPtr
newCallback_IService_getId(T* instance, void (T::*cb)(const ::gtr::ServiceIdentifyT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_getId<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IService_getId : public Callback_IService_getId_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::gtr::ServiceIdentifyT&, const CT&);

    Callback_IService_getId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IServicePrx __proxy = ::gtr::IServicePrx::uncheckedCast(__result->getProxy());
        ::gtr::ServiceIdentifyT __ret;
        try
        {
            __ret = __proxy->end_getId(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IService_getIdPtr
newCallback_IService_getId(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::ServiceIdentifyT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_getId<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_getIdPtr
newCallback_IService_getId(T* instance, void (T::*cb)(const ::gtr::ServiceIdentifyT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_getId<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IService_getTimestamp : public Callback_IService_getTimestamp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_IService_getTimestamp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IServicePrx __proxy = ::gtr::IServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTimestamp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IService_getTimestampPtr
newCallback_IService_getTimestamp(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_getTimestamp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_getTimestampPtr
newCallback_IService_getTimestamp(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_getTimestamp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IService_getTimestamp : public Callback_IService_getTimestamp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_IService_getTimestamp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IServicePrx __proxy = ::gtr::IServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTimestamp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IService_getTimestampPtr
newCallback_IService_getTimestamp(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_getTimestamp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_getTimestampPtr
newCallback_IService_getTimestamp(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_getTimestamp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IService_shutdown : public Callback_IService_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IService_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IService_shutdownPtr
newCallback_IService_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_shutdownPtr
newCallback_IService_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IService_shutdownPtr
newCallback_IService_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_shutdownPtr
newCallback_IService_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IService_shutdown : public Callback_IService_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IService_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IService_shutdownPtr
newCallback_IService_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_shutdownPtr
newCallback_IService_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IService_shutdownPtr
newCallback_IService_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_shutdownPtr
newCallback_IService_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IService_heartbeat : public Callback_IService_heartbeat_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IService_heartbeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_heartbeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_heartbeat<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_heartbeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IService_heartbeat<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IService_heartbeat : public Callback_IService_heartbeat_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IService_heartbeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_heartbeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_heartbeat<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_heartbeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IService_heartbeatPtr
newCallback_IService_heartbeat(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IService_heartbeat<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IAnswerEndpoint_getRemains : public Callback_IAnswerEndpoint_getRemains_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_IAnswerEndpoint_getRemains(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IAnswerEndpointPrx __proxy = ::gtr::IAnswerEndpointPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getRemains(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IAnswerEndpoint_getRemainsPtr
newCallback_IAnswerEndpoint_getRemains(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnswerEndpoint_getRemains<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAnswerEndpoint_getRemainsPtr
newCallback_IAnswerEndpoint_getRemains(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnswerEndpoint_getRemains<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAnswerEndpoint_getRemains : public Callback_IAnswerEndpoint_getRemains_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_IAnswerEndpoint_getRemains(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IAnswerEndpointPrx __proxy = ::gtr::IAnswerEndpointPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getRemains(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAnswerEndpoint_getRemainsPtr
newCallback_IAnswerEndpoint_getRemains(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnswerEndpoint_getRemains<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAnswerEndpoint_getRemainsPtr
newCallback_IAnswerEndpoint_getRemains(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnswerEndpoint_getRemains<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IAnswerEndpoint_addQuestion : public Callback_IAnswerEndpoint_addQuestion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_IAnswerEndpoint_addQuestion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IAnswerEndpointPrx __proxy = ::gtr::IAnswerEndpointPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addQuestion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IAnswerEndpoint_addQuestionPtr
newCallback_IAnswerEndpoint_addQuestion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnswerEndpoint_addQuestion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IAnswerEndpoint_addQuestionPtr
newCallback_IAnswerEndpoint_addQuestion(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IAnswerEndpoint_addQuestion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IAnswerEndpoint_addQuestion : public Callback_IAnswerEndpoint_addQuestion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_IAnswerEndpoint_addQuestion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IAnswerEndpointPrx __proxy = ::gtr::IAnswerEndpointPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addQuestion(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IAnswerEndpoint_addQuestionPtr
newCallback_IAnswerEndpoint_addQuestion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnswerEndpoint_addQuestion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IAnswerEndpoint_addQuestionPtr
newCallback_IAnswerEndpoint_addQuestion(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IAnswerEndpoint_addQuestion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuestionAsker_answerResult : public Callback_IQuestionAsker_answerResult_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IQuestionAsker_answerResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionAsker_answerResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionAsker_answerResult<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionAsker_answerResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionAsker_answerResult<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuestionAsker_answerResult : public Callback_IQuestionAsker_answerResult_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IQuestionAsker_answerResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionAsker_answerResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionAsker_answerResult<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionAsker_answerResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionAsker_answerResultPtr
newCallback_IQuestionAsker_answerResult(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionAsker_answerResult<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IQuestionServer_answer : public Callback_IQuestionServer_answer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IQuestionServer_answer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuestionServer_answer : public Callback_IQuestionServer_answer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IQuestionServer_answer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_answerPtr
newCallback_IQuestionServer_answer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IQuestionServer_answerResult : public Callback_IQuestionServer_answerResult_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IQuestionServer_answerResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answerResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answerResult<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answerResult<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_answerResult<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuestionServer_answerResult : public Callback_IQuestionServer_answerResult_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IQuestionServer_answerResult(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answerResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answerResult<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answerResult<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_answerResultPtr
newCallback_IQuestionServer_answerResult(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_answerResult<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IQuestionServer_login : public Callback_IQuestionServer_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::gtr::CallReturnT&);

    CallbackNC_IQuestionServer_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IQuestionServerPrx __proxy = ::gtr::IQuestionServerPrx::uncheckedCast(__result->getProxy());
        ::gtr::CallReturnT __ret;
        try
        {
            __ret = __proxy->end_login(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IQuestionServer_loginPtr
newCallback_IQuestionServer_login(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::CallReturnT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_loginPtr
newCallback_IQuestionServer_login(T* instance, void (T::*cb)(const ::gtr::CallReturnT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_login<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuestionServer_login : public Callback_IQuestionServer_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::gtr::CallReturnT&, const CT&);

    Callback_IQuestionServer_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IQuestionServerPrx __proxy = ::gtr::IQuestionServerPrx::uncheckedCast(__result->getProxy());
        ::gtr::CallReturnT __ret;
        try
        {
            __ret = __proxy->end_login(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IQuestionServer_loginPtr
newCallback_IQuestionServer_login(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::CallReturnT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_loginPtr
newCallback_IQuestionServer_login(T* instance, void (T::*cb)(const ::gtr::CallReturnT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IQuestionServer_logout : public Callback_IQuestionServer_logout_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IQuestionServer_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_logout<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_logout<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuestionServer_logout : public Callback_IQuestionServer_logout_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IQuestionServer_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_logout<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_logoutPtr
newCallback_IQuestionServer_logout(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_logout<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IQuestionServer_verifyAnswer : public Callback_IQuestionServer_verifyAnswer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IQuestionServer_verifyAnswer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_verifyAnswer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_verifyAnswer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_verifyAnswer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IQuestionServer_verifyAnswer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IQuestionServer_verifyAnswer : public Callback_IQuestionServer_verifyAnswer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IQuestionServer_verifyAnswer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_verifyAnswer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_verifyAnswer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_verifyAnswer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IQuestionServer_verifyAnswerPtr
newCallback_IQuestionServer_verifyAnswer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IQuestionServer_verifyAnswer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ILogger_gameMsg : public Callback_ILogger_gameMsg_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ILogger_gameMsg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameMsg<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameMsg<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameMsg<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameMsg<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILogger_gameMsg : public Callback_ILogger_gameMsg_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ILogger_gameMsg(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameMsg<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameMsg<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameMsg<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILogger_gameMsgPtr
newCallback_ILogger_gameMsg(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameMsg<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ILogger_gameImage : public Callback_ILogger_gameImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ILogger_gameImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILogger_gameImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILogger_gameImage : public Callback_ILogger_gameImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ILogger_gameImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILogger_gameImagePtr
newCallback_ILogger_gameImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILogger_gameImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IGameHost_getTask : public Callback_IGameHost_getTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::gtr::GameTaskletT&);

    CallbackNC_IGameHost_getTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IGameHostPrx __proxy = ::gtr::IGameHostPrx::uncheckedCast(__result->getProxy());
        ::gtr::GameTaskletT __ret;
        try
        {
            __ret = __proxy->end_getTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IGameHost_getTaskPtr
newCallback_IGameHost_getTask(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::GameTaskletT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_getTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGameHost_getTaskPtr
newCallback_IGameHost_getTask(T* instance, void (T::*cb)(const ::gtr::GameTaskletT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_getTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IGameHost_getTask : public Callback_IGameHost_getTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::gtr::GameTaskletT&, const CT&);

    Callback_IGameHost_getTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IGameHostPrx __proxy = ::gtr::IGameHostPrx::uncheckedCast(__result->getProxy());
        ::gtr::GameTaskletT __ret;
        try
        {
            __ret = __proxy->end_getTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IGameHost_getTaskPtr
newCallback_IGameHost_getTask(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::GameTaskletT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_getTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_getTaskPtr
newCallback_IGameHost_getTask(T* instance, void (T::*cb)(const ::gtr::GameTaskletT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_getTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IGameHost_completeTask : public Callback_IGameHost_completeTask_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IGameHost_completeTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_completeTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_completeTask<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_completeTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_completeTask<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IGameHost_completeTask : public Callback_IGameHost_completeTask_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IGameHost_completeTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_completeTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_completeTask<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_completeTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_completeTaskPtr
newCallback_IGameHost_completeTask(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_completeTask<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IGameHost_answer : public Callback_IGameHost_answer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_IGameHost_answer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IGameHostPrx __proxy = ::gtr::IGameHostPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_answer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IGameHost_answerPtr
newCallback_IGameHost_answer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_answer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGameHost_answerPtr
newCallback_IGameHost_answer(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_answer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IGameHost_answer : public Callback_IGameHost_answer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_IGameHost_answer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IGameHostPrx __proxy = ::gtr::IGameHostPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_answer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IGameHost_answerPtr
newCallback_IGameHost_answer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_answer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_answerPtr
newCallback_IGameHost_answer(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_answer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IGameHost_verifyAnswer : public Callback_IGameHost_verifyAnswer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IGameHost_verifyAnswer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_verifyAnswer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_verifyAnswer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_verifyAnswer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGameHost_verifyAnswer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IGameHost_verifyAnswer : public Callback_IGameHost_verifyAnswer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IGameHost_verifyAnswer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_verifyAnswer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_verifyAnswer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_verifyAnswer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGameHost_verifyAnswerPtr
newCallback_IGameHost_verifyAnswer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGameHost_verifyAnswer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IGtrServer_getTask : public Callback_IGtrServer_getTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::gtr::GameTaskletT&);

    CallbackNC_IGtrServer_getTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IGtrServerPrx __proxy = ::gtr::IGtrServerPrx::uncheckedCast(__result->getProxy());
        ::gtr::GameTaskletT __ret;
        try
        {
            __ret = __proxy->end_getTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_IGtrServer_getTaskPtr
newCallback_IGtrServer_getTask(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::GameTaskletT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGtrServer_getTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGtrServer_getTaskPtr
newCallback_IGtrServer_getTask(T* instance, void (T::*cb)(const ::gtr::GameTaskletT&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGtrServer_getTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IGtrServer_getTask : public Callback_IGtrServer_getTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::gtr::GameTaskletT&, const CT&);

    Callback_IGtrServer_getTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::gtr::IGtrServerPrx __proxy = ::gtr::IGtrServerPrx::uncheckedCast(__result->getProxy());
        ::gtr::GameTaskletT __ret;
        try
        {
            __ret = __proxy->end_getTask(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IGtrServer_getTaskPtr
newCallback_IGtrServer_getTask(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::gtr::GameTaskletT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGtrServer_getTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGtrServer_getTaskPtr
newCallback_IGtrServer_getTask(T* instance, void (T::*cb)(const ::gtr::GameTaskletT&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGtrServer_getTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IGtrServer_completeTask : public Callback_IGtrServer_completeTask_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IGtrServer_completeTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGtrServer_completeTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGtrServer_completeTask<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGtrServer_completeTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IGtrServer_completeTask<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IGtrServer_completeTask : public Callback_IGtrServer_completeTask_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IGtrServer_completeTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGtrServer_completeTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGtrServer_completeTask<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGtrServer_completeTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IGtrServer_completeTaskPtr
newCallback_IGtrServer_completeTask(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IGtrServer_completeTask<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
